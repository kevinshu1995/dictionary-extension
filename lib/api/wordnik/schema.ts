/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/word.json/{word}/audio": {
    /** The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported. */
    get: operations["getAudio"];
  };
  "/word.json/{word}/definitions": {
    get: operations["getDefinitions"];
  };
  "/word.json/{word}/etymologies": {
    get: operations["getEtymologies"];
  };
  "/word.json/{word}/examples": {
    get: operations["getExamples"];
  };
  "/word.json/{word}/frequency": {
    get: operations["getWordFrequency"];
  };
  "/word.json/{word}/hyphenation": {
    get: operations["getHyphenation"];
  };
  "/word.json/{word}/phrases": {
    get: operations["getPhrases"];
  };
  "/word.json/{word}/pronunciations": {
    get: operations["getTextPronunciations"];
  };
  "/word.json/{word}/relatedWords": {
    get: operations["getRelatedWords"];
  };
  "/word.json/{word}/scrabbleScore": {
    get: operations["getScrabbleScore"];
  };
  "/word.json/{word}/topExample": {
    get: operations["getTopExample"];
  };
  "/words.json/randomWord": {
    get: operations["getRandomWord"];
  };
  "/words.json/randomWords": {
    get: operations["getRandomWords"];
  };
  "/words.json/reverseDictionary": {
    get: operations["reverseDictionary"];
  };
  "/words.json/search/{query}": {
    get: operations["searchWords"];
  };
  "/words.json/wordOfTheDay": {
    get: operations["getWordOfTheDay"];
  };
}

export interface definitions {
  ApiTokenStatus: {
    /** Format: int64 */
    expiresInMillis?: number;
    /** Format: int64 */
    remainingCalls?: number;
    /** Format: int64 */
    resetsInMillis?: number;
    token?: string;
    /** Format: int64 */
    totalRequests?: number;
    valid?: boolean;
  };
  AudioFile: {
    attributionText?: string;
    attributionUrl?: string;
    audioType?: string;
    /** Format: int32 */
    commentCount?: number;
    /** Format: date */
    createdAt?: string;
    createdBy?: string;
    description?: string;
    /** Format: double */
    duration?: number;
    fileUrl?: string;
    /** Format: int64 */
    id: number;
    /** Format: float */
    voteAverage?: number;
    voteCount?: number;
    /** Format: float */
    voteWeightedAverage?: number;
    word?: string;
  };
  AudioType: {
    /** Format: int32 */
    id?: number;
    name?: string;
  };
  AuthenticationToken: {
    token?: string;
    /** Format: int64 */
    userId?: number;
    userSignature?: string;
  };
  Bigram: {
    /** Format: int64 */
    count?: number;
    gram1?: string;
    gram2?: string;
    /** Format: double */
    mi?: number;
    /** Format: double */
    wlmi?: number;
  };
  Category: {
    /** Format: int64 */
    id: number;
    name?: string;
  };
  Citation: {
    cite?: string;
    source?: string;
  };
  ContentProvider: {
    /** Format: int32 */
    id?: number;
    name?: string;
  };
  Definition: {
    attributionText?: string;
    attributionUrl?: string;
    citations?: unknown[];
    exampleUses?: unknown[];
    extendedText?: string;
    labels?: unknown[];
    notes?: unknown[];
    partOfSpeech?: string;
    relatedWords?: unknown[];
    /** Format: float */
    score?: number;
    seqString?: string;
    sequence?: string;
    sourceDictionary?: string;
    text?: string;
    textProns?: unknown[];
    word?: string;
  };
  DefinitionSearchResults: {
    results?: unknown[];
    /** Format: int32 */
    totalResults?: number;
  };
  Example: {
    /** Format: int64 */
    documentId?: number;
    /** Format: int64 */
    exampleId?: number;
    /** Format: int64 */
    id?: number;
    provider?: definitions["ContentProvider"];
    /** Format: float */
    rating?: number;
    score?: definitions["ScoredWord"];
    sentence?: definitions["Sentence"];
    text?: string;
    title?: string;
    url?: string;
    word?: string;
    year?: number;
  };
  ExampleSearchResults: {
    examples?: unknown[];
    facets?: unknown[];
  };
  ExampleUsage: {
    text?: string;
  };
  Facet: {
    facetValues?: unknown[];
    name?: string;
  };
  FacetValue: {
    /** Format: int64 */
    count?: number;
    value?: string;
  };
  Frequency: {
    /** Format: int64 */
    count?: number;
    /** Format: int32 */
    year?: number;
  };
  FrequencySummary: {
    frequency?: unknown[];
    frequencyString?: string;
    /** Format: int64 */
    totalCount?: number;
    /** Format: int32 */
    unknownYearCount?: number;
    word?: string;
  };
  Label: {
    text?: string;
    type?: string;
  };
  Long: {
    /** Format: int64 */
    value?: number;
  };
  Note: {
    appliesTo?: string[];
    noteType?: string;
    /** Format: int32 */
    pos?: number;
    value?: string;
  };
  PartOfSpeech: {
    allCategories?: unknown[];
    roots?: unknown[];
    storageAbbr?: string[];
  };
  Related: {
    gram?: string;
    label1?: string;
    label2?: string;
    label3?: string;
    label4?: string;
    relationshipType?: string;
    words?: string[];
  };
  Root: {
    categories?: unknown[];
    /** Format: int64 */
    id: number;
    name?: string;
  };
  ScoredWord: {
    /** Format: double */
    baseWordScore?: number;
    /** Format: int32 */
    docTermCount?: number;
    /** Format: int64 */
    id?: number;
    lemma?: string;
    partOfSpeech?: string;
    /** Format: int32 */
    position?: number;
    /** Format: float */
    score?: number;
    /** Format: int64 */
    sentenceId?: number;
    stopword?: boolean;
    word?: string;
    wordType?: string;
  };
  Sentence: {
    display?: string;
    /** Format: int64 */
    documentMetadataId?: number;
    hasScoredWords?: boolean;
    /** Format: int64 */
    id?: number;
    /** Format: int32 */
    rating?: number;
    scoredWords?: unknown[];
  };
  SimpleDefinition: {
    note?: string;
    partOfSpeech?: string;
    source?: string;
    text?: string;
  };
  SimpleExample: {
    /** Format: int64 */
    id?: number;
    text?: string;
    title?: string;
    url?: string;
  };
  StringValue: {
    word?: string;
  };
  Syllable: {
    /** Format: int32 */
    seq?: number;
    text?: string;
    type?: string;
  };
  TextPron: {
    raw?: string;
    rawType?: string;
    /** Format: int32 */
    seq?: number;
  };
  User: {
    displayName?: string;
    email?: string;
    faceBookId?: string;
    /** Format: int64 */
    id?: number;
    password?: string;
    /** Format: int32 */
    status?: number;
    userName?: string;
    username?: string;
  };
  WordList: {
    /** Format: date */
    createdAt?: string;
    description?: string;
    /** Format: int64 */
    id: number;
    /** Format: date */
    lastActivityAt?: string;
    name?: string;
    /** Format: int64 */
    numberWordsInList?: number;
    permalink?: string;
    type?: string;
    /** Format: date */
    updatedAt?: string;
    /** Format: int64 */
    userId?: number;
    username?: string;
  };
  WordListWord: {
    /** Format: date */
    createdAt?: string;
    /** Format: int64 */
    id: number;
    /** Format: int64 */
    numberCommentsOnWord?: number;
    /** Format: int64 */
    numberLists?: number;
    /** Format: int64 */
    userId?: number;
    username?: string;
    word?: string;
  };
  WordObject: {
    canonicalForm?: string;
    /** Format: int64 */
    id: number;
    originalWord?: string;
    suggestions?: string[];
    vulgar?: string;
    word?: string;
  };
  WordOfTheDay: {
    category?: string;
    contentProvider?: definitions["ContentProvider"];
    /** Format: date */
    createdAt?: string;
    createdBy?: string;
    definitions?: unknown[];
    examples?: unknown[];
    htmlExtra?: string;
    /** Format: int64 */
    id: number;
    note?: string;
    parentId?: string;
    /** Format: date */
    publishDate?: string;
    word?: string;
  };
  WordSearchResult: {
    /** Format: int64 */
    count?: number;
    /** Format: double */
    lexicality?: number;
    word?: string;
  };
  WordSearchResults: {
    searchResults?: unknown[];
    /** Format: int32 */
    totalResults?: number;
  };
}

export interface operations {
  /** The metadata includes a time-expiring fileUrl which allows reading the audio file directly from the API.  Currently only audio pronunciations from the American Heritage Dictionary in mp3 format are supported. */
  getAudio: {
    parameters: {
      path: {
        /** Word to get audio for. */
        word: string;
      };
      query: {
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["AudioFile"][];
      };
    };
  };
  getDefinitions: {
    parameters: {
      path: {
        /** Word to return definitions for */
        word: string;
      };
      query: {
        /** Maximum number of results to return */
        limit?: number;
        /** CSV list of part-of-speech types */
        partOfSpeech?:
          | "noun"
          | "adjective"
          | "verb"
          | "adverb"
          | "interjection"
          | "pronoun"
          | "preposition"
          | "abbreviation"
          | "affix"
          | "article"
          | "auxiliary-verb"
          | "conjunction"
          | "definite-article"
          | "family-name"
          | "given-name"
          | "idiom"
          | "imperative"
          | "noun-plural"
          | "noun-posessive"
          | "past-participle"
          | "phrasal-prefix"
          | "proper-noun"
          | "proper-noun-plural"
          | "proper-noun-posessive"
          | "suffix"
          | "verb-intransitive"
          | "verb-transitive";
        /** Return related words with definitions */
        includeRelated?: string;
        /** Source dictionary to return definitions from.  If 'all' is received, results are returned from all sources. If multiple values are received (e.g. 'century,wiktionary'), results are returned from the first specified dictionary that has definitions. If left blank, results are returned from the first dictionary that has definitions. By default, dictionaries are searched in this order: ahd-5, wiktionary, webster, century, wordnet */
        sourceDictionaries?:
          | "all"
          | "ahd-5"
          | "century"
          | "wiktionary"
          | "webster"
          | "wordnet";
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Return a closed set of XML tags in response */
        includeTags?: "false" | "true";
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["Definition"][];
      };
    };
  };
  getEtymologies: {
    parameters: {
      path: {
        /** Word to return */
        word: string;
      };
      query: {
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: string[];
      };
    };
  };
  getExamples: {
    parameters: {
      path: {
        /** Word to return examples for */
        word: string;
      };
      query: {
        /** Show duplicate examples from different sources */
        includeDuplicates?: "false" | "true";
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Results to skip */
        skip?: number;
        /** Maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["ExampleSearchResults"];
      };
    };
  };
  getWordFrequency: {
    parameters: {
      path: {
        /** Word to return */
        word: string;
      };
      query: {
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Starting Year */
        startYear?: number;
        /** Ending Year */
        endYear?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["FrequencySummary"];
      };
    };
  };
  getHyphenation: {
    parameters: {
      path: {
        /** Word to get syllables for */
        word: string;
      };
      query: {
        /** If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Get from a single dictionary. Valid options: ahd-5, century, wiktionary, webster, and wordnet. */
        sourceDictionary?:
          | "ahd-5"
          | "century"
          | "wiktionary"
          | "webster"
          | "wordnet";
        /** Maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["Syllable"][];
      };
    };
  };
  getPhrases: {
    parameters: {
      path: {
        /** Word to fetch phrases for */
        word: string;
      };
      query: {
        /** Maximum number of results to return */
        limit?: number;
        /** Minimum WLMI for the phrase */
        wlmi?: number;
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["Bigram"][];
      };
    };
  };
  getTextPronunciations: {
    parameters: {
      path: {
        /** Word to get pronunciations for */
        word: string;
      };
      query: {
        /** If true will try to return a correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Get from a single dictionary */
        sourceDictionary?:
          | "ahd-5"
          | "century"
          | "cmu"
          | "macmillan"
          | "wiktionary"
          | "webster"
          | "wordnet";
        /** Text pronunciation type */
        typeFormat?: "ahd-5" | "arpabet" | "gcide-diacritical" | "IPA";
        /** Maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["TextPron"][];
      };
    };
  };
  getRelatedWords: {
    parameters: {
      path: {
        /** Word to fetch relationships for */
        word: string;
      };
      query: {
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
        /** Limits the total results per type of relationship type */
        relationshipTypes?:
          | "synonym"
          | "antonym"
          | "variant"
          | "equivalent"
          | "cross-reference"
          | "related-word"
          | "rhyme"
          | "form"
          | "etymologically-related-term"
          | "hypernym"
          | "hyponym"
          | "inflected-form"
          | "primary"
          | "same-context"
          | "verb-form"
          | "verb-stem"
          | "has_topic";
        /** Restrict to the supplied relationship types */
        limitPerRelationshipType?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["Related"][];
      };
    };
  };
  getScrabbleScore: {
    parameters: {
      path: {
        /** Word to get scrabble score for. */
        word: string;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: number;
      };
    };
  };
  getTopExample: {
    parameters: {
      path: {
        /** Word to fetch examples for */
        word: string;
      };
      query: {
        /** If true will try to return the correct word root ('cats' -> 'cat'). If false returns exactly what was requested. */
        useCanonical?: "false" | "true";
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["Example"];
      };
    };
  };
  getRandomWord: {
    parameters: {
      query: {
        /** Only return words with dictionary definitions */
        hasDictionaryDef?: string;
        /** CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        includePartOfSpeech?: string;
        /** CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        excludePartOfSpeech?: string;
        /** Minimum corpus frequency for terms */
        minCorpusCount?: number;
        /** Maximum corpus frequency for terms */
        maxCorpusCount?: number;
        /** Minimum dictionary count */
        minDictionaryCount?: number;
        /** Maximum dictionary count */
        maxDictionaryCount?: number;
        /** Minimum word length */
        minLength?: number;
        /** Maximum word length */
        maxLength?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["WordObject"];
      };
    };
  };
  getRandomWords: {
    parameters: {
      query: {
        /** Only return words with dictionary definitions */
        hasDictionaryDef?: string;
        /** CSV part-of-speech values to include (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        includePartOfSpeech?: string;
        /** CSV part-of-speech values to exclude (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        excludePartOfSpeech?: string;
        /** Minimum corpus frequency for terms */
        minCorpusCount?: number;
        /** Maximum corpus frequency for terms */
        maxCorpusCount?: number;
        /** Minimum dictionary count */
        minDictionaryCount?: number;
        /** Maximum dictionary count */
        maxDictionaryCount?: number;
        /** Minimum word length */
        minLength?: number;
        /** Maximum word length */
        maxLength?: number;
        /** Attribute to sort by */
        sortBy?: "alpha" | "count";
        /** Sort direction */
        sortOrder?: "asc" | "desc";
        /** Maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["WordObject"][];
      };
    };
  };
  reverseDictionary: {
    parameters: {
      query: {
        /** Search term */
        query: string;
        /** Restricts words and finds closest sense */
        findSenseForWord?: string;
        /** Only include these comma-delimited source dictionaries */
        includeSourceDictionaries?:
          | "ahd-5"
          | "century"
          | "cmu"
          | "macmillan"
          | "wiktionary"
          | "webster"
          | "wordnet";
        /** Exclude these comma-delimited source dictionaries */
        excludeSourceDictionaries?:
          | "ahd-5"
          | "century"
          | "cmu"
          | "macmillan"
          | "wiktionary"
          | "webster"
          | "wordnet";
        /** Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        includePartOfSpeech?: string;
        /** Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        excludePartOfSpeech?: string;
        /** Minimum corpus frequency for terms */
        minCorpusCount?: number;
        /** Maximum corpus frequency for terms */
        maxCorpusCount?: number;
        /** Minimum word length */
        minLength?: number;
        /** Maximum word length */
        maxLength?: number;
        /** Expand terms */
        expandTerms?: string;
        /** Return a closed set of XML tags in response */
        includeTags?: "false" | "true";
        /** Attribute to sort by */
        sortBy?: "alpha" | "count";
        /** Sort direction */
        sortOrder?: "asc" | "desc";
        /** Results to skip */
        skip?: string;
        /** Maximum number of results to return */
        limit?: number;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["DefinitionSearchResults"];
      };
    };
  };
  searchWords: {
    parameters: {
      query: {
        /** Search term is a Regular Expression */
        allowRegex?: string;
        /** Search case sensitive */
        caseSensitive?: string;
        /** Only include these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        includePartOfSpeech?: string;
        /** Exclude these comma-delimited parts of speech (allowable values are noun, adjective, verb, adverb, interjection, pronoun, preposition, abbreviation, affix, article, auxiliary-verb, conjunction, definite-article, family-name, given-name, idiom, imperative, noun-plural, noun-posessive, past-participle, phrasal-prefix, proper-noun, proper-noun-plural, proper-noun-posessive, suffix, verb-intransitive, verb-transitive) */
        excludePartOfSpeech?: string;
        /** Minimum corpus frequency for terms */
        minCorpusCount?: number;
        /** Maximum corpus frequency for terms */
        maxCorpusCount?: number;
        /** Minimum number of dictionary entries for words returned */
        minDictionaryCount?: number;
        /** Maximum dictionary definition count */
        maxDictionaryCount?: number;
        /** Minimum word length */
        minLength?: number;
        /** Maximum word length */
        maxLength?: number;
        /** Results to skip */
        skip?: number;
        /** Maximum number of results to return */
        limit?: number;
      };
      path: {
        /** Search query */
        query: string;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["WordSearchResults"];
      };
    };
  };
  getWordOfTheDay: {
    parameters: {
      query: {
        /** Fetches by date in yyyy-MM-dd */
        date?: string;
      };
    };
    responses: {
      /** No response was specified */
      200: {
        schema: definitions["WordOfTheDay"];
      };
    };
  };
}

export interface external {}
